Menu="Utilities"
Title="SSH Tools"
Icon="key"
---
<?
# Get CSRF token from Unraid's variable system
$csrf_token = $var['csrf_token'] ?? '';

# Debug CSRF token
error_log("SSH-Tools: CSRF token from \$var: " . ($csrf_token ? 'present' : 'missing'));

# Get plugin version
$plugin = "ssh-tools";
$version_file = '/boot/config/plugins/ssh-tools/VERSION';
$version = file_exists($version_file) ? trim(file_get_contents($version_file)) : 'Unknown';
?>

<div style="color: #F15A2C; font-weight: bold; font-size: 12px; margin-bottom: 10px;">
Plugin Version: <?=$version?>
</div>

<div style="margin-bottom: 20px;">
<strong>SSH Tools</strong>
</div>

<div style="margin-bottom: 20px; color: var(--text-color);">
Comprehensive SSH key management for Unraid. Easily exchange SSH keys with remote machines, track connections, and manage SSH utilities. Essential for ZFS replication, rsync backups, and secure remote access.
</div>

<style>
/* Tab navigation styling */
.tab-nav {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));
  gap: 8px;
  margin-bottom: 20px;
}

.tab-nav button {
  display: block;
  padding: 10px 20px;
  background: transparent;
  border: 2px solid #F15A2C;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  border-radius: 6px;
  text-align: center;
  transition: all 0.2s ease;
}

.tab-nav button.active {
  background: #F15A2C;
  border: 2px solid #F15A2C;
  color: #ffffff;
  font-weight: bold;
}

.tab-content {
  display: none;
}

.tab-content.active {
  display: block;
}

/* Status output styling - theme neutral */
#statusOutput {
  padding: 15px;
  border-radius: 5px;
  border: 1px solid #ccc;
  min-height: 200px;
  max-height: 400px;
  overflow-y: auto;
  white-space: pre-wrap;
  font-family: 'Courier New', monospace;
}

/* Loading spinner */
.loading-spinner {
  display: inline-block;
  width: 16px;
  height: 16px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid #F15A2C;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-right: 8px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Status indicators */
.status-success {
  color: #28a745;
  font-weight: bold;
}

.status-error {
  color: #dc3545;
  font-weight: bold;
}

.status-warning {
  color: #ffc107;
  font-weight: bold;
}

.status-info {
  color: #17a2b8;
  font-weight: bold;
}

/* Button loading state */
.button-loading {
  opacity: 0.6;
  pointer-events: none;
}

/* SweetAlert is used for modals - provides automatic theme compatibility */
</style>

<!-- Tab Navigation -->
<div class="tab-nav">
  <button type="button" onclick="showTab('exchange')" id="btn-exchange" class="active">EXCHANGE SSH KEYS</button>
  <button type="button" onclick="showTab('keys')" id="btn-keys">EXCHANGED KEYS</button>
  <button type="button" onclick="showTab('status')" id="btn-status">STATUS</button>
</div>

<!-- SSH Key Exchange Tab -->
<div id="content-exchange" class="tab-content active">
  <h2>SSH Key Exchange</h2>
  
  <div style="margin-bottom: 15px; padding: 10px; border-radius: 5px; border-left: 4px solid #FF9800;">
    <strong>Note:</strong> This will generate an ed25519 SSH key if one doesn't exist, then exchange it with the target machine. 
    If keys are already exchanged, it will add the existing connection to your tracking list (useful after plugin reinstall).
    Essential for passwordless SSH connections needed for ZFS replication, rsync, and remote management.
  </div>
  
  <form onsubmit="return false;">
    <dl>
      <dt>Remote Host IP/Hostname</dt>
      <dd>
        <input type="text" id="remoteHost" class="short" placeholder="192.168.1.100 or hostname">
        <div class="description">IP address or hostname of the target machine</div>
      </dd>
    </dl>
    
    <dl>
      <dt>Username</dt>
      <dd>
        <input type="text" id="remoteUsername" class="short" value="root" placeholder="root">
        <div class="description">Username on the target machine (default: root for Unraid servers)</div>
      </dd>
    </dl>
    
    <dl>
      <dt>SSH Port</dt>
      <dd>
        <input type="number" id="remotePort" class="short" value="22" min="1" max="65535" placeholder="22">
        <div class="description">SSH port (default: 22)</div>
      </dd>
    </dl>
    
    <dl>
      <dt>Password</dt>
      <dd>
        <input type="password" id="remotePassword" class="short" placeholder="Password for authentication" autocomplete="current-password">
        <div style="margin-top: 5px;">
          <input type="checkbox" id="showPassword" onchange="togglePasswordVisibility()">
          <label for="showPassword" style="margin-left: 5px;">Show password</label>
        </div>
        <div class="description">Password for the remote user (required for initial key exchange)</div>
      </dd>
    </dl>
    
    <dl>
      <dt>&nbsp;</dt>
      <dd>
        <span class="buttons-spaced">
          <button type="button" onclick="testConnection()" id="testBtn">Test Connection</button>
          <button type="button" onclick="exchangeSSHKeys()" id="exchangeBtn">Exchange SSH Keys Now</button>
        </span>
        <div class="description">Test the connection first, then exchange keys for passwordless SSH access (or rediscover existing exchanges)</div>
      </dd>
    </dl>
  </form>
  
  <h3>Current SSH Key Status</h3>
  <dl>
    <dt>Local SSH Key</dt>
    <dd>
      <div style="margin-bottom: 10px;">
        <span id="keyStatus">Checking...</span>
      </div>
      <span><button type="button" onclick="checkKeyStatus()">Refresh Status</button></span>
      <div class="description">Status of your Unraid server's SSH key</div>
    </dd>
  </dl>
</div>

<!-- Exchanged Keys Tab -->
<div id="content-keys" class="tab-content">
  <h2>Exchanged SSH Keys</h2>
  
  <p>Track and manage machines where SSH keys have been successfully exchanged.</p>
  
  <dl>
    <dt>&nbsp;</dt>
    <dd>
      <span class="buttons-spaced">
        <button type="button" onclick="refreshExchangedKeys()">Refresh List</button>
        <button type="button" onclick="testAllConnections()">Test All Connections</button>
      </span>
      <div class="description">Manage your exchanged SSH keys and test connectivity</div>
    </dd>
  </dl>
  
  <div style="margin-top: 20px;">
    <h3>Exchanged Keys</h3>
    <div id="exchangedKeysList" style="padding: 15px; border-radius: 5px; border: 1px solid #ccc; min-height: 100px;">
      Loading exchanged keys...
    </div>
  </div>
  
  <div style="margin-top: 20px;">
    <h3>Authorized SSH Keys</h3>
    <p>Machines that are authorized to connect to this server</p>
    <dl>
      <dt>&nbsp;</dt>
      <dd>
        <span class="buttons-spaced">
          <button type="button" onclick="refreshAuthorizedKeys()">Refresh List</button>
        </span>
        <div class="description">Manage machines authorized to connect to your server</div>
      </dd>
    </dl>
    <div id="authorizedKeysList" style="padding: 15px; border-radius: 5px; border: 1px solid #ccc; min-height: 100px;">
      Loading authorized keys...
    </div>
  </div>
  
  <div style="margin-top: 20px;">
    <h3>SSH Tools</h3>
    <dl>
      <dt>Connection Testing</dt>
      <dd>
        <input type="text" id="testHost" class="short" placeholder="IP or hostname to test">
        <div style="margin-top: 5px;">
          <span><button type="button" onclick="testSingleConnection()">Test Connection</button></span>
        </div>
        <div class="description">Test SSH connectivity to a specific host</div>
      </dd>
    </dl>
    
    <dl>
      <dt>Network Scan</dt>
      <dd>
        <input type="text" id="scanNetwork" class="short" placeholder="192.168.1.0/24" value="192.168.1.0/24">
        <div style="margin-top: 5px;">
          <span><button type="button" onclick="scanForSSH()">Scan for SSH</button></span>
        </div>
        <div class="description">Scan network range for SSH services</div>
      </dd>
    </dl>
  </div>
</div>

<!-- Status Tab -->
<div id="content-status" class="tab-content">
  <h2>Status</h2>
  
  <p>Operation output and status information will be displayed here.</p>
  
  <dl>
    <dt>&nbsp;</dt>
    <dd>
      <span><button type="button" onclick="clearStatus()">Clear Output</button></span>
    </dd>
  </dl>
  
  <pre id="statusOutput">No operations performed yet. Output from plugin operations will appear here.</pre>
</div>

<!-- SweetAlert modals are used - no custom HTML needed -->


<script>
// Test function to verify JavaScript is loading
console.log('SSH Tools JavaScript is loading...');

// Make CSRF token available to JavaScript
var csrf_token = <?=json_encode($csrf_token)?>;
console.log('CSRF token loaded:', csrf_token ? 'present' : 'missing');

// Password visibility toggle
function togglePasswordVisibility() {
  const passwordField = document.getElementById('remotePassword');
  const showPasswordCheckbox = document.getElementById('showPassword');
  
  if (showPasswordCheckbox.checked) {
    passwordField.type = 'text';
  } else {
    passwordField.type = 'password';
  }
}

// Tab functionality
function showTab(tabId) {
  // Hide all tab content
  const contents = document.querySelectorAll('.tab-content');
  contents.forEach(content => {
    content.classList.remove('active');
  });
  
  // Remove active class from all buttons
  const buttons = document.querySelectorAll('.tab-nav button');
  buttons.forEach(button => {
    button.classList.remove('active');
  });
  
  // Show selected tab and activate button
  document.getElementById('content-' + tabId).classList.add('active');
  document.getElementById('btn-' + tabId).classList.add('active');
  
  // Refresh data when switching to certain tabs
  if (tabId === 'keys') {
    refreshExchangedKeys();
    refreshAuthorizedKeys();
  } else if (tabId === 'exchange') {
    checkKeyStatus();
  }
}

// Status functions with enhanced formatting
function updateStatus(message, type = 'info') {
  const statusOutput = document.getElementById('statusOutput');
  const timestamp = new Date().toLocaleTimeString();
  const formattedMessage = '[' + timestamp + '] ' + message;
  
  statusOutput.textContent += formattedMessage + '\n';
  statusOutput.scrollTop = statusOutput.scrollHeight;
  // Don't automatically switch to status tab - let user stay on current tab
}

function setStatus(message, type = 'info') {
  const statusOutput = document.getElementById('statusOutput');
  const timestamp = new Date().toLocaleTimeString();
  const formattedMessage = '[' + timestamp + '] ' + message;
  
  statusOutput.textContent = formattedMessage + '\n';
  statusOutput.scrollTop = statusOutput.scrollHeight;
  // Don't automatically switch to status tab - let user stay on current tab
}

function clearStatus() {
  document.getElementById('statusOutput').textContent = 'Output cleared.\n';
}

// Global variables for modal state
let modalActionData = {};

// SweetAlert confirmation modal
function showConfirmModal(hostname) {
  // Store data for later use
  modalActionData = {
    hostname: hostname,
    host: document.getElementById('remoteHost').value,
    username: document.getElementById('remoteUsername').value,
    password: document.getElementById('remotePassword').value,
    port: document.getElementById('remotePort').value
  };
  
  // Format display hostname with port if non-standard
  const displayHost = modalActionData.port && modalActionData.port != 22 
    ? hostname + ':' + modalActionData.port
    : hostname;
  
  swal({
    title: 'SSH Key Exchange',
    text: 'This will exchange SSH keys with ' + displayHost + '. If keys already exist, they will be added to your tracking list. Continue?',
    type: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Continue',
    cancelButtonText: 'Cancel',
    closeOnConfirm: true,
    html: true
  }, function(isConfirm) {
    if (isConfirm) {
      // Perform the exchange operation
      performSSHKeyExchange();
    } else {
      // User cancelled - clear stored data
      modalActionData = {};
    }
  });
}

// Button loading state management
function setButtonLoading(buttonId, loading = true) {
  const button = document.getElementById(buttonId);
  if (!button) return;
  
  if (loading) {
    button.classList.add('button-loading');
    button.innerHTML = '<span class="loading-spinner"></span>' + button.textContent;
  } else {
    button.classList.remove('button-loading');
    // Remove spinner if present
    const spinner = button.querySelector('.loading-spinner');
    if (spinner) {
      spinner.remove();
    }
  }
}

// Enhanced status update with auto-categorization
function smartUpdateStatus(message) {
  let type = 'info';
  
  if (message.toLowerCase().includes('error') || message.toLowerCase().includes('failed')) {
    type = 'error';
  } else if (message.toLowerCase().includes('success') || message.toLowerCase().includes('completed') || message.toLowerCase().includes('✓')) {
    type = 'success';
  } else if (message.toLowerCase().includes('warning') || message.toLowerCase().includes('⚠')) {
    type = 'warning';
  }
  
  updateStatus(message, type);
}

// SSH Key Management Functions
function checkKeyStatus() {
  updateStatus('Checking SSH key status...');
  
  executeOperation('check_key_status', {}, function(response) {
    document.getElementById('keyStatus').textContent = response.trim();
    smartUpdateStatus('SSH key status updated');
  });
}

function testConnection() {
  const host = document.getElementById('remoteHost').value;
  const username = document.getElementById('remoteUsername').value;
  const password = document.getElementById('remotePassword').value;
  const port = document.getElementById('remotePort').value;
  
  if (!host || !username || !password) {
    setStatus('Error: Please fill in all fields for connection testing', 'error');
    return;
  }
  
  setButtonLoading('testBtn', true);
  
  // Format display hostname with port if non-standard
  const displayHost = port && port != 22 ? host + ':' + port : host;
  updateStatus('Testing connection to ' + displayHost + '...');
  
  const postData = {
    host: host,
    username: username,
    password: password,
    port: port
  };
  
  executeOperation('test_connection', postData, function(response) {
    setButtonLoading('testBtn', false);
    smartUpdateStatus(response);
  }, function() {
    setButtonLoading('testBtn', false);
  });
}

function exchangeSSHKeys() {
  const host = document.getElementById('remoteHost').value;
  const username = document.getElementById('remoteUsername').value;
  const password = document.getElementById('remotePassword').value;
  const port = document.getElementById('remotePort').value;
  
  if (!host || !username || !password) {
    setStatus('Error: Please fill in all fields to exchange SSH keys', 'error');
    return;
  }
  
  // Show confirmation modal first
  showConfirmModal(host);
}

function performSSHKeyExchange() {
  const postData = {
    host: modalActionData.host,
    username: modalActionData.username,
    password: modalActionData.password,
    port: modalActionData.port
  };
  
  setButtonLoading('exchangeBtn', true);
  
  // Format display hostname with port if non-standard
  const displayHost = modalActionData.port && modalActionData.port != 22 
    ? modalActionData.hostname + ':' + modalActionData.port
    : modalActionData.hostname;
  
  updateStatus('Processing SSH keys for ' + displayHost + '...');
  
  executeOperation('exchange_keys', postData, function(response) {
    setButtonLoading('exchangeBtn', false);
    smartUpdateStatus(response);
    
    // Show success modal and auto-navigate
    if (response.toLowerCase().includes('successfully')) {
      swal({
        title: 'Success!',
        text: 'SSH keys have been successfully exchanged with ' + displayHost,
        type: 'success',
        confirmButtonText: 'View Exchanged Keys',
        closeOnConfirm: true
      }, function() {
        // Auto-navigate to Exchanged Keys tab
        checkKeyStatus();
        refreshExchangedKeys();
        showTab('keys');
      });
    } else if (response.toLowerCase().includes('error')) {
      swal({
        title: 'Error',
        text: response,
        type: 'error',
        confirmButtonText: 'OK'
      });
    }
  }, function() {
    setButtonLoading('exchangeBtn', false);
    swal({
      title: 'Error',
      text: 'Failed to communicate with the server',
      type: 'error',
      confirmButtonText: 'OK'
    });
  });
}

function refreshExchangedKeys() {
  document.getElementById('exchangedKeysList').innerHTML = '<div class="loading-spinner"></div>Loading exchanged keys...';
  
  executeOperation('list_exchanged_keys', {}, function(response) {
    document.getElementById('exchangedKeysList').innerHTML = response;
    smartUpdateStatus('Exchanged keys list updated');
  }, function() {
    document.getElementById('exchangedKeysList').innerHTML = '<div style="color: #dc3545;">Error loading exchanged keys</div>';
  });
}

function testAllConnections() {
  updateStatus('Testing all exchanged connections...');
  executeOperation('test_all_connections', {});
}

function testSingleConnection() {
  const host = document.getElementById('testHost').value;
  
  if (!host) {
    setStatus('Error: Please enter a host to test');
    return;
  }
  
  updateStatus('Testing connection to ' + host + '...');
  
  executeOperation('test_single_connection', { host: host });
}

function scanForSSH() {
  const network = document.getElementById('scanNetwork').value;
  
  if (!network) {
    setStatus('Error: Please enter a network range to scan');
    return;
  }
  
  updateStatus('Scanning ' + network + ' for SSH services...');
  
  executeOperation('scan_ssh', { network: network });
}

// Authorized Keys Management Functions
function refreshAuthorizedKeys() {
  document.getElementById('authorizedKeysList').innerHTML = '<div class="loading-spinner"></div>Loading authorized keys...';
  
  executeOperation('list_authorized_keys', {}, function(response) {
    document.getElementById('authorizedKeysList').innerHTML = response;
    smartUpdateStatus('Authorized keys list updated');
  }, function() {
    document.getElementById('authorizedKeysList').innerHTML = '<div style="color: #dc3545;">Error loading authorized keys</div>';
  });
}

function deleteAuthorizedKey(keyId, hostname, lineNumber) {
  swal({
    title: 'Remove Authorized Key?',
    text: 'This will revoke SSH access for <strong>' + hostname + '</strong>.<br><br>The machine will no longer be able to connect to this server without a password.<br><br>This action cannot be undone.',
    type: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Remove Access',
    cancelButtonText: 'Cancel',
    confirmButtonColor: '#d33',
    html: true
  }, function(isConfirm) {
    if (isConfirm) {
      performAuthorizedKeyDeletion(keyId, hostname, lineNumber);
    }
  });
}

function performAuthorizedKeyDeletion(keyId, hostname, lineNumber) {
  updateStatus('Removing authorized key for ' + hostname + '...');
  
  executeOperation('remove_authorized_key', { 
    key_line_number: lineNumber 
  }, function(response) {
    if (response.toLowerCase().includes('successfully')) {
      swal({
        title: 'Access Revoked!',
        text: 'SSH access has been successfully removed for ' + hostname,
        type: 'success',
        confirmButtonText: 'Continue'
      }, function() {
        // Refresh the authorized keys list
        refreshAuthorizedKeys();
        smartUpdateStatus(response);
      });
    } else {
      swal({
        title: 'Error',
        text: response,
        type: 'error',
        confirmButtonText: 'OK'
      });
    }
  }, function() {
    swal({
      title: 'Error',
      text: 'Failed to communicate with the server',
      type: 'error',
      confirmButtonText: 'OK'
    });
  });
}

// Exchanged Keys Revocation Functions - TEMPORARILY REMOVED FOR DEBUGGING

// Helper function for AJAX operations
function executeOperation(operation, data, successCallback, errorCallback) {
  const postData = {
    operation: operation,
    csrf_token: csrf_token || '',
    ...data
  };
  
  // Debug logging
  console.log('Sending AJAX request:', {
    operation: operation,
    csrf_token: postData.csrf_token ? postData.csrf_token.substring(0, 8) + '...' : 'EMPTY',
    data: data
  });
  
  $.ajax({
    url: '/plugins/ssh-tools/scripts/run_main_script.php',
    type: 'POST',
    data: postData,
    success: function(response) {
      // Check if response contains error
      if (response.toLowerCase().includes('error:')) {
        smartUpdateStatus(response);
      } else {
        smartUpdateStatus(response);
      }
      
      if (successCallback) {
        successCallback(response);
      }
    },
    error: function(xhr, status, error) {
      const errorMessage = 'Error: Failed to execute ' + operation + ' (' + status + ')';
      setStatus(errorMessage, 'error');
      
      if (errorCallback) {
        errorCallback(error);
      }
    }
  });
}

// Initialize the interface
$(document).ready(function() {
  // Start on the exchange tab first, before any AJAX calls
  showTab('exchange');
  
  // Add click handlers for tab buttons to ensure they work
  $('#btn-exchange').click(function() { showTab('exchange'); });
  $('#btn-keys').click(function() { showTab('keys'); });
  $('#btn-status').click(function() { showTab('status'); });
  
  // Welcome message - add to status but don't switch to it
  updateStatus('SSH Tools plugin initialized successfully');
  updateStatus('Initializing SSH key management interface...');
  updateStatus('CSRF token initialized: ' + (csrf_token ? csrf_token.substring(0, 8) + '...' : 'MISSING'));
  
  // Only load initial data if CSRF token is available
  if (csrf_token && csrf_token.length > 0) {
    updateStatus('Loading initial data...');
    // Load initial data silently
    checkKeyStatus();
    refreshExchangedKeys();
    refreshAuthorizedKeys();
    updateStatus('Ready for SSH key operations');
  } else {
    updateStatus('Warning: CSRF token missing - some functions may not work');
    updateStatus('Ready for SSH key operations (limited functionality)');
  }
});
</script>
