Menu="Utilities"
Title="SSH Tools"
Icon="key"
---
<?
# Get CSRF token from Unraid's variable system
$csrf_token = $var['csrf_token'] ?? '';

# Debug CSRF token
error_log("SSH-Tools: CSRF token from \$var: " . ($csrf_token ? 'present' : 'missing'));

# Get plugin version
$plugin = "ssh-tools";
$version_file = '/boot/config/plugins/ssh-tools/VERSION';
$version = file_exists($version_file) ? trim(file_get_contents($version_file)) : 'Unknown';
?>

<div style="color: #F15A2C; font-weight: bold; font-size: 12px; margin-bottom: 10px;">
Plugin Version: <?=$version?>
</div>

<div style="margin-bottom: 20px;">
<strong>SSH Tools</strong>
</div>

<div style="margin-bottom: 20px; color: var(--text-color);">
Comprehensive SSH key management for Unraid. Easily exchange SSH keys with remote machines, track connections, and manage SSH utilities. Essential for ZFS replication, rsync backups, and secure remote access.
</div>

<style>
/* Tab navigation styling */
.tab-nav {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));
  gap: 8px;
  margin-bottom: 20px;
}

.tab-nav button {
  display: block;
  padding: 10px 20px;
  background: transparent;
  border: 2px solid #F15A2C;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  border-radius: 6px;
  text-align: center;
  transition: all 0.2s ease;
}

.tab-nav button.active {
  background: #F15A2C;
  border: 2px solid #F15A2C;
  color: #ffffff;
  font-weight: bold;
}

.tab-content {
  display: none;
}

.tab-content.active {
  display: block;
}

/* Status output styling - theme neutral */
#statusOutput {
  padding: 15px;
  border-radius: 5px;
  border: 1px solid #ccc;
  min-height: 200px;
  max-height: 400px;
  overflow-y: auto;
  white-space: pre-wrap;
  font-family: 'Courier New', monospace;
}

/* Loading spinner */
.loading-spinner {
  display: inline-block;
  width: 16px;
  height: 16px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid #F15A2C;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-right: 8px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Status indicators */
.status-success {
  color: #28a745;
  font-weight: bold;
}

.status-error {
  color: #dc3545;
  font-weight: bold;
}

.status-warning {
  color: #ffc107;
  font-weight: bold;
}

.status-info {
  color: #17a2b8;
  font-weight: bold;
}

/* Button loading state */
.button-loading {
  opacity: 0.6;
  pointer-events: none;
}

/* SweetAlert is used for modals - provides automatic theme compatibility */

/* Custom styling for duplicate detection modal */
.btn-choice {
  display: inline-block;
  margin: 5px;
  padding: 8px 16px;
  background: #F15A2C;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 12px;
  font-weight: 500;
  transition: background-color 0.2s ease;
}

.btn-choice:hover {
  background: #d04a1c;
}

.btn-choice.btn-cancel {
  background: #6c757d;
}

.btn-choice.btn-cancel:hover {
  background: #5a6268;
}

.duplicate-detection-modal {
  width: 500px !important;
}

.duplicate-detection-modal .sa-button-container {
  text-align: center;
  margin-top: 20px;
}
</style>

<!-- Tab Navigation -->
<div class="tab-nav">
  <button type="button" onclick="showTab('manage')" id="btn-manage" class="active">MANAGE SSH KEYS</button>
  <button type="button" onclick="showTab('exchange')" id="btn-exchange">EXCHANGE KEYS</button>
  <button type="button" onclick="showTab('tools')" id="btn-tools">SSH TOOLS</button>
  <button type="button" onclick="showTab('debug')" id="btn-debug">DEBUG LOG</button>
</div>

<!-- Manage SSH Keys Tab -->
<div id="content-manage" class="tab-content active">
  <h2>Manage SSH Keys</h2>
  
  <p>View and manage your SSH key connections and access permissions.</p>
  
  <dl>
    <dt>&nbsp;</dt>
    <dd>
      <span class="buttons-spaced">
        <button type="button" onclick="refreshExchangedKeys()">Refresh Lists</button>
        <button type="button" onclick="testAllConnections()">Test All Connections</button>
      </span>
      <div class="description">Refresh both lists and test connectivity</div>
    </dd>
  </dl>
  
  <div style="margin-top: 20px;">
    <h3>Authorized SSH Keys</h3>
    <p>Machines that are authorized to connect to this server</p>
    <dl>
      <dt>&nbsp;</dt>
      <dd>
        <span class="buttons-spaced">
          <button type="button" onclick="refreshAuthorizedKeys()">Refresh List</button>
        </span>
        <div class="description">Manage machines authorized to connect to your server</div>
      </dd>
    </dl>
    <div id="authorizedKeysList" style="padding: 15px; border-radius: 5px; border: 1px solid #ccc; min-height: 100px;">
      Loading authorized keys...
    </div>
  </div>
  
  <div style="margin-top: 20px;">
    <h3>Exchanged SSH Keys</h3>
    <p>Track and manage machines where SSH keys have been successfully exchanged.</p>
    <div id="exchangedKeysList" style="padding: 15px; border-radius: 5px; border: 1px solid #ccc; min-height: 100px;">
      Loading exchanged keys...
    </div>
  </div>
</div>

<!-- Exchange SSH Keys Tab -->
<div id="content-exchange" class="tab-content">
  <h2>Exchange SSH Keys</h2>
  
  <p>Establish passwordless SSH connections with remote machines.</p>
  
  <form onsubmit="return false;">
    <dl>
      <dt>Remote Host IP/Hostname</dt>
      <dd>
        <input type="text" id="remoteHost" class="short" placeholder="192.168.1.100 or hostname">
        <div class="description">IP address or hostname of the target machine</div>
      </dd>
    </dl>
    
    <dl>
      <dt>Username</dt>
      <dd>
        <input type="text" id="remoteUsername" class="short" value="root" placeholder="root">
        <div class="description">Username on the target machine (default: root for Unraid servers)</div>
      </dd>
    </dl>
    
    <dl>
      <dt>SSH Port</dt>
      <dd>
        <input type="number" id="remotePort" class="short" value="22" min="1" max="65535" placeholder="22">
        <div class="description">SSH port (default: 22)</div>
      </dd>
    </dl>
    
    <dl>
      <dt>Password</dt>
      <dd>
        <input type="password" id="remotePassword" class="short" placeholder="Password for authentication" autocomplete="current-password">
        <div style="margin-top: 5px;">
          <input type="checkbox" id="showPassword" onchange="togglePasswordVisibility()">
          <label for="showPassword" style="margin-left: 5px;">Show password</label>
        </div>
        <div class="description">Password for the remote user (required for initial key exchange)</div>
      </dd>
    </dl>
    
    <dl>
      <dt>&nbsp;</dt>
      <dd>
        <span class="buttons-spaced">
          <button type="button" onclick="testConnection()" id="testBtn">Test Connection</button>
          <button type="button" onclick="exchangeSSHKeys()" id="exchangeBtn">Exchange SSH Keys Now</button>
        </span>
        <div class="description">Test the connection first, then exchange keys for passwordless SSH access (or rediscover existing exchanges)</div>
      </dd>
    </dl>
  </form>
  
  <h3>SSH Key Status</h3>
  <dl>
    <dt>Server SSH Key</dt>
    <dd>
      <div style="margin-bottom: 10px;">
        <span id="keyStatus">Checking...</span>
      </div>
      <span><button type="button" onclick="checkKeyStatus()">Check Status</button></span>
      <div class="description">SSH key will be generated automatically if needed</div>
    </dd>
  </dl>
</div>

<!-- SSH Tools Tab -->
<div id="content-tools" class="tab-content">
  <h2>SSH Tools</h2>
  
  <p>Connection testing and network scanning utilities for SSH management.</p>
  
  <div style="margin-top: 20px;">
    <h3>Connection Testing</h3>
    <dl>
      <dt>Test Host</dt>
      <dd>
        <input type="text" id="testHost" class="short" placeholder="IP or hostname to test">
        <div style="margin-top: 5px;">
          <span><button type="button" onclick="testSingleConnection()">Test Connection</button></span>
        </div>
        <div class="description">Test SSH connectivity to a specific host</div>
      </dd>
    </dl>
  </div>
  
  <div style="margin-top: 20px;">
    <h3>Network Scanning</h3>
    <dl>
      <dt>Network Range</dt>
      <dd>
        <input type="text" id="scanNetwork" class="short" placeholder="192.168.1.0/24" value="192.168.1.0/24">
        <div style="margin-top: 5px;">
          <span><button type="button" onclick="scanForSSH()">Scan for SSH</button></span>
        </div>
        <div class="description">Scan network range for SSH services</div>
      </dd>
    </dl>
  </div>
</div>

<!-- Debug Log Tab -->
<div id="content-debug" class="tab-content">
  <h2>Debug Log</h2>
  
  <p>Technical output and debugging information from plugin operations.</p>
  
  <dl>
    <dt>&nbsp;</dt>
    <dd>
      <span><button type="button" onclick="clearStatus()">Clear Output</button></span>
    </dd>
  </dl>
  
  <pre id="statusOutput">No operations performed yet. Output from plugin operations will appear here.</pre>
</div>

<!-- SweetAlert modals are used - no custom HTML needed -->


<script>
// Test function to verify JavaScript is loading
console.log('SSH Tools JavaScript is loading...');

// Make CSRF token available to JavaScript
var csrf_token = <?=json_encode($csrf_token)?>;
console.log('CSRF token loaded:', csrf_token ? 'present' : 'missing');

// Password visibility toggle
function togglePasswordVisibility() {
  const passwordField = document.getElementById('remotePassword');
  const showPasswordCheckbox = document.getElementById('showPassword');
  
  if (showPasswordCheckbox.checked) {
    passwordField.type = 'text';
  } else {
    passwordField.type = 'password';
  }
}

// Tab functionality
function showTab(tabId) {
  // Hide all tab content
  const contents = document.querySelectorAll('.tab-content');
  contents.forEach(content => {
    content.classList.remove('active');
  });
  
  // Remove active class from all buttons
  const buttons = document.querySelectorAll('.tab-nav button');
  buttons.forEach(button => {
    button.classList.remove('active');
  });
  
  // Show selected tab and activate button
  document.getElementById('content-' + tabId).classList.add('active');
  document.getElementById('btn-' + tabId).classList.add('active');
  
  // Refresh data when switching to certain tabs
  if (tabId === 'manage') {
    refreshExchangedKeys();
    refreshAuthorizedKeys();
  } else if (tabId === 'exchange') {
    checkKeyStatus();
  }
}

// Status functions with enhanced formatting
function updateStatus(message, type = 'info') {
  const statusOutput = document.getElementById('statusOutput');
  const timestamp = new Date().toLocaleTimeString();
  const formattedMessage = '[' + timestamp + '] ' + message;
  
  statusOutput.textContent += formattedMessage + '\n';
  statusOutput.scrollTop = statusOutput.scrollHeight;
  // Don't automatically switch to status tab - let user stay on current tab
}

function setStatus(message, type = 'info') {
  const statusOutput = document.getElementById('statusOutput');
  const timestamp = new Date().toLocaleTimeString();
  const formattedMessage = '[' + timestamp + '] ' + message;
  
  statusOutput.textContent = formattedMessage + '\n';
  statusOutput.scrollTop = statusOutput.scrollHeight;
  // Don't automatically switch to status tab - let user stay on current tab
}

function clearStatus() {
  document.getElementById('statusOutput').textContent = 'Output cleared.\n';
}

// Global variables for modal state
let modalActionData = {};

// SweetAlert confirmation modal
function showConfirmModal(hostname) {
  // Store data for later use
  modalActionData = {
    hostname: hostname,
    host: document.getElementById('remoteHost').value,
    username: document.getElementById('remoteUsername').value,
    password: document.getElementById('remotePassword').value,
    port: document.getElementById('remotePort').value
  };
  
  // Format display hostname with port if non-standard
  const displayHost = modalActionData.port && modalActionData.port != 22 
    ? hostname + ':' + modalActionData.port
    : hostname;
  
  swal({
    title: 'SSH Key Exchange',
    text: 'This will exchange SSH keys with ' + displayHost + '. If keys already exist, they will be added to your tracking list. Continue?',
    type: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Continue',
    cancelButtonText: 'Cancel',
    closeOnConfirm: true,
    html: true
  }, function(isConfirm) {
    if (isConfirm) {
      // Perform the exchange operation
      performSSHKeyExchange();
    } else {
      // User cancelled - clear stored data
      modalActionData = {};
    }
  });
}

// Button loading state management
function setButtonLoading(buttonId, loading = true) {
  const button = document.getElementById(buttonId);
  if (!button) return;
  
  if (loading) {
    button.classList.add('button-loading');
    button.innerHTML = '<span class="loading-spinner"></span>' + button.textContent;
  } else {
    button.classList.remove('button-loading');
    // Remove spinner if present
    const spinner = button.querySelector('.loading-spinner');
    if (spinner) {
      spinner.remove();
    }
  }
}

// Enhanced status update with auto-categorization
function smartUpdateStatus(message) {
  let type = 'info';
  
  if (message.toLowerCase().includes('error') || message.toLowerCase().includes('failed')) {
    type = 'error';
  } else if (message.toLowerCase().includes('success') || message.toLowerCase().includes('completed') || message.toLowerCase().includes('✓')) {
    type = 'success';
  } else if (message.toLowerCase().includes('warning') || message.toLowerCase().includes('⚠')) {
    type = 'warning';
  }
  
  updateStatus(message, type);
}

// Handle stale cleanup success notification
function handleStaleCleanupSuccess(response) {
  // Extract the message after "STALE_CLEANUP_SUCCESS: "
  const message = response.replace('STALE_CLEANUP_SUCCESS: ', '').trim();
  
  // Extract connection details from the message
  // Format: "Stale SSH connection cleaned up successfully. Please run 'Exchange SSH Keys' again to create a fresh connection to root@10.10.20.199:22."
  const connectionMatch = message.match(/to ([^@]+@[^:]+:\d+)/);
  const connectionDetails = connectionMatch ? connectionMatch[1] : 'the remote server';
  
  swal({
    title: 'Stale Connection Detected & Cleaned Up',
    text: 'A stale SSH connection to <strong>' + connectionDetails + '</strong> was found and cleaned up.<br><br>' +
          '<strong>What this means:</strong><br>' +
          '• Your plugin had this connection in its records<br>' +
          '• But the SSH key was missing from the remote server<br>' +
          '• Old connection data has been removed and orphaned keys cleaned up<br><br>' +
          '<strong>Next step:</strong> Click the "Exchange SSH Keys Now" button again with the same credentials to create a fresh connection.',
    type: 'warning',
    confirmButtonText: 'Continue',
    closeOnConfirm: true,
    html: true
  }, function() {
    // Refresh the exchanged keys list to show the cleanup
    refreshExchangedKeys();
  });
}

// Duplicate Detection and User Choice System
function handleDuplicateDetection(response) {
  // Parse the duplicate detection response: DUPLICATE_DETECTED|host|username|port|registry_exists|ssh_access_exists|details
  const parts = response.split('|');
  if (parts.length < 7) {
    console.error('Invalid duplicate detection response format');
    return;
  }
  
  const host = parts[1];
  const username = parts[2];
  const port = parts[3];
  const registryExists = parts[4] === 'true';
  const sshAccessExists = parts[5] === 'true';
  const details = parts[6] || '';
  
  // Format display hostname with port if non-standard
  const displayHost = port && port != 22 ? host + ':' + port : host;
  
  // Use simplified approach - clear messages, no complex choices
  handleExistingSSHConnection(host, username, port, displayHost, registryExists, sshAccessExists, details);
}

// Simplified approach - no complex modal choices, just clear status messages
function handleExistingSSHConnection(host, username, port, displayHost, registryExists, sshAccessExists, details) {
  if (registryExists && sshAccessExists) {
    // Connection already tracked and working
    swal({
      title: 'SSH Connection Already Active',
      html: '✅ SSH access to <strong>' + displayHost + '</strong> is already working and tracked.<br><br>' +
            'No changes needed. Your existing connection will continue to work.',
      type: 'success',
      confirmButtonText: 'View Connections'
    }, function() {
      showTab('manage');
      refreshExchangedKeys();
    });
  } else if (sshAccessExists) {
    // SSH works but not tracked - add to registry
    swal({
      title: 'Existing SSH Access Detected',
      html: '✅ SSH access to <strong>' + displayHost + '</strong> is already working!<br><br>' +
            'This connection is not in your plugin registry yet.<br>' +
            'Adding it to tracking now...',
      type: 'info',
      showConfirmButton: false,
      allowOutsideClick: false
    });
    
    // Add to registry by calling the backend
    addExistingConnectionToRegistry(host, username, port, displayHost);
  } else if (registryExists) {
    // In registry but SSH test failed - this should be rare now with improved detection
    // For now, just show it's already tracked (most likely working but test failed)
    swal({
      title: 'Connection Already Tracked',
      html: '✅ SSH connection to <strong>' + displayHost + '</strong> is already in your tracking registry.<br><br>' +
            'If you\'re having connection issues, you can manage this connection from the "Manage SSH Keys" tab.',
      type: 'info',
      confirmButtonText: 'View Connections'
    }, function() {
      showTab('manage');
      refreshExchangedKeys();
    });
  }
}

// Helper function to add existing SSH connection to registry
function addExistingConnectionToRegistry(host, username, port, displayHost) {
  executeOperation('add_external_connection', {
    host: host,
    username: username,
    port: port
  }, function(response) {
    swal({
      title: 'Connection Added!',
      html: '✅ Successfully added existing SSH connection to tracking:<br><br>' +
            '<strong>' + displayHost + '</strong><br><br>' +
            'You can manage this connection from the "Manage SSH Keys" tab.',
      type: 'success',
      confirmButtonText: 'View Connections'
    }, function() {
      showTab('manage');
      refreshExchangedKeys();
    });
  }, function(error) {
    swal({
      title: 'Registry Update Failed',
      text: 'Could not add connection to registry: ' + error,
      type: 'error',
      confirmButtonText: 'OK'
    });
  });
}

// Helper function to proceed with normal key exchange (bypass duplicate detection)
function proceedWithKeyExchange() {
  const host = document.getElementById('remoteHost').value;
  const username = document.getElementById('remoteUsername').value;
  const password = document.getElementById('remotePassword').value;
  const port = document.getElementById('remotePort').value;
  
  if (!host || !username || !password) {
    swal({
      title: 'Missing Information',
      text: 'Please fill in all fields (Host, Username, Password) to create the SSH key.',
      type: 'error',
      confirmButtonText: 'OK'
    });
    return;
  }
  
  // Call backend directly with force flag to bypass duplicate detection
  const displayHost = port && port != 22 ? host + ':' + port : host;
  
  executeOperation('exchange_keys', {
    host: host,
    username: username,
    password: password,
    port: port,
    force_duplicate: true  // Bypass duplicate detection
  }, function(response) {
    // Success - close any modal and show success
    swal.close();
    
    if (response.toLowerCase().includes('successfully')) {
      swal({
        title: 'SSH Key Created Successfully!',
        html: '✅ Successfully created SSH key for <strong>' + displayHost + '</strong><br><br>' +
              'SSH access is now configured and ready to use.',
        type: 'success',
        confirmButtonText: 'View Connections'
      }, function() {
        showTab('manage');
        refreshExchangedKeys();
      });
    } else {
      swal({
        title: 'Key Exchange Failed',
        text: 'Failed to create SSH key: ' + response,
        type: 'error',
        confirmButtonText: 'OK'
      });
    }
  }, function(error) {
    // Error
    swal.close();
    swal({
      title: 'Key Exchange Failed',
      text: 'Error creating SSH key: ' + error,
      type: 'error',
      confirmButtonText: 'OK'
    });
  });
}

// Removed complex duplicate handling functions - using simplified approach

// Removed cleanupBrokenConnectionAndProceed function - no longer needed with improved SSH detection

// SSH Key Management Functions
function checkKeyStatus() {
  updateStatus('Checking SSH key status...');
  
  executeOperation('check_key_status', {}, function(response) {
    document.getElementById('keyStatus').textContent = response.trim();
    smartUpdateStatus('SSH key status updated');
  });
}

function testConnection() {
  const host = document.getElementById('remoteHost').value;
  const username = document.getElementById('remoteUsername').value;
  const password = document.getElementById('remotePassword').value;
  const port = document.getElementById('remotePort').value;
  
  if (!host || !username || !password) {
    setStatus('Error: Please fill in all fields for connection testing', 'error');
    return;
  }
  
  setButtonLoading('testBtn', true);
  
  // Format display hostname with port if non-standard
  const displayHost = port && port != 22 ? host + ':' + port : host;
  updateStatus('Testing connection to ' + displayHost + '...');
  
  const postData = {
    host: host,
    username: username,
    password: password,
    port: port
  };
  
  executeOperation('test_connection', postData, function(response) {
    setButtonLoading('testBtn', false);
    smartUpdateStatus(response);
  }, function() {
    setButtonLoading('testBtn', false);
  });
}

function exchangeSSHKeys() {
  const host = document.getElementById('remoteHost').value;
  const username = document.getElementById('remoteUsername').value;
  const password = document.getElementById('remotePassword').value;
  const port = document.getElementById('remotePort').value;
  
  if (!host || !username || !password) {
    setStatus('Error: Please fill in all fields to exchange SSH keys', 'error');
    return;
  }
  
  // Show confirmation modal first
  showConfirmModal(host);
}

function performSSHKeyExchange() {
  const postData = {
    host: modalActionData.host,
    username: modalActionData.username,
    password: modalActionData.password,
    port: modalActionData.port
  };
  
  setButtonLoading('exchangeBtn', true);
  
  // Format display hostname with port if non-standard
  const displayHost = modalActionData.port && modalActionData.port != 22 
    ? modalActionData.hostname + ':' + modalActionData.port
    : modalActionData.hostname;
  
  updateStatus('Processing SSH keys for ' + displayHost + '...');
  
  executeOperation('exchange_keys', postData, function(response) {
    setButtonLoading('exchangeBtn', false);
    smartUpdateStatus(response);
    
    // Check for stale cleanup success response
    if (response.includes('STALE_CLEANUP_SUCCESS:')) {
      handleStaleCleanupSuccess(response);
    }
    // Check for duplicate detection response
    else if (response.includes('DUPLICATE_DETECTED|')) {
      handleDuplicateDetection(response);
    }
    // Show success modal and auto-navigate
    else if (response.toLowerCase().includes('successfully')) {
      swal({
        title: 'Success!',
        text: 'SSH keys have been successfully exchanged with ' + displayHost,
        type: 'success',
        confirmButtonText: 'View SSH Keys',
        closeOnConfirm: true
      }, function() {
        // Auto-navigate to Manage SSH Keys tab
        checkKeyStatus();
        refreshExchangedKeys();
        showTab('manage');
      });
    } else if (response.toLowerCase().includes('error')) {
      swal({
        title: 'Error',
        text: response,
        type: 'error',
        confirmButtonText: 'OK'
      });
    }
  }, function() {
    setButtonLoading('exchangeBtn', false);
    swal({
      title: 'Error',
      text: 'Failed to communicate with the server',
      type: 'error',
      confirmButtonText: 'OK'
    });
  });
}

function refreshExchangedKeys() {
  document.getElementById('exchangedKeysList').innerHTML = '<div class="loading-spinner"></div>Loading exchanged keys...';
  
  executeOperation('list_exchanged_keys', {}, function(response) {
    document.getElementById('exchangedKeysList').innerHTML = response;
    smartUpdateStatus('Exchanged keys list updated');
  }, function() {
    document.getElementById('exchangedKeysList').innerHTML = '<div style="color: #dc3545;">Error loading exchanged keys</div>';
  });
}

function testAllConnections() {
  updateStatus('Testing all exchanged connections...');
  executeOperation('test_all_connections', {});
}

function testSingleConnection() {
  const host = document.getElementById('testHost').value;
  
  if (!host) {
    setStatus('Error: Please enter a host to test');
    return;
  }
  
  updateStatus('Testing connection to ' + host + '...');
  
  executeOperation('test_single_connection', { host: host });
}

function scanForSSH() {
  const network = document.getElementById('scanNetwork').value;
  
  if (!network) {
    setStatus('Error: Please enter a network range to scan');
    return;
  }
  
  updateStatus('Scanning ' + network + ' for SSH services...');
  
  executeOperation('scan_ssh', { network: network });
}

// Authorized Keys Management Functions
function refreshAuthorizedKeys() {
  document.getElementById('authorizedKeysList').innerHTML = '<div class="loading-spinner"></div>Loading authorized keys...';
  
  executeOperation('list_authorized_keys', {}, function(response) {
    document.getElementById('authorizedKeysList').innerHTML = response;
    smartUpdateStatus('Authorized keys list updated');
  }, function() {
    document.getElementById('authorizedKeysList').innerHTML = '<div style="color: #dc3545;">Error loading authorized keys</div>';
  });
}

function deleteAuthorizedKey(keyId, hostname, lineNumber) {
  swal({
    title: 'Remove Authorized Key?',
    text: 'This will revoke SSH access for <strong>' + hostname + '</strong>.<br><br>The machine will no longer be able to connect to this server without a password.<br><br>This action cannot be undone.',
    type: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Remove Access',
    cancelButtonText: 'Cancel',
    confirmButtonColor: '#d33',
    html: true
  }, function(isConfirm) {
    if (isConfirm) {
      performAuthorizedKeyDeletion(keyId, hostname, lineNumber);
    }
  });
}

function performAuthorizedKeyDeletion(keyId, hostname, lineNumber) {
  updateStatus('Removing authorized key for ' + hostname + '...');
  
  executeOperation('remove_authorized_key', { 
    key_line_number: lineNumber 
  }, function(response) {
    if (response.toLowerCase().includes('successfully')) {
      swal({
        title: 'Access Revoked!',
        text: 'SSH access has been successfully removed for ' + hostname,
        type: 'success',
        confirmButtonText: 'Continue'
      }, function() {
        // Refresh the authorized keys list
        refreshAuthorizedKeys();
        smartUpdateStatus(response);
      });
    } else {
      swal({
        title: 'Error',
        text: response,
        type: 'error',
        confirmButtonText: 'OK'
      });
    }
  }, function() {
    swal({
      title: 'Error',
      text: 'Failed to communicate with the server',
      type: 'error',
      confirmButtonText: 'OK'
    });
  });
}

// Exchanged Keys Revocation Functions - RESTORING MAIN FUNCTION FIRST
function revokeExchangedKey(keyId, displayHost, hostname, username, port, lineNumber) {
  console.log('revokeExchangedKey called with:', {keyId, displayHost, hostname, username, port, lineNumber});
  
  // Test connection first
  updateStatus('Testing connection to ' + displayHost + '...');
  
  // Record start time for minimum modal display duration
  const modalStartTime = Date.now();
  const minimumDisplayTime = 2000; // 2 seconds minimum
  
  swal({
    title: 'Testing Connection',
    text: 'Checking if ' + displayHost + ' is reachable...',
    type: 'info',
    showConfirmButton: false,
    allowOutsideClick: false
  });
  
  // Test SSH connectivity first with the correct username
  executeOperation('test_single_connection', { 
    host: hostname + ':' + port,
    username: username
  }, function(response) {
    console.log('Connection test response:', response);
    
    // Calculate how long the modal has been displayed
    const elapsedTime = Date.now() - modalStartTime;
    const remainingTime = Math.max(0, minimumDisplayTime - elapsedTime);
    
    console.log('Modal displayed for:', elapsedTime + 'ms, waiting additional:', remainingTime + 'ms');
    
    // Wait for the minimum display time before closing the modal
    setTimeout(function() {
      swal.close();
      
      // Wait a moment for the modal to fully close before showing the next one
      setTimeout(function() {
        if (response.toLowerCase().includes('successful')) {
          console.log('Server is reachable - showing full revocation modal');
          // Server is reachable - show full revocation modal
          showFullRevocationModal(keyId, displayHost, hostname, username, port, lineNumber);
        } else {
          console.log('Server is unreachable - showing unreachable modal');
          // Server is unreachable - show local-only modal with educational info
          showUnreachableServerModal(keyId, displayHost, hostname, username, port, lineNumber);
        }
      }, 300); // 300ms delay to ensure modal is fully closed
    }, remainingTime);
  }, function() {
    console.log('Connection test failed - showing unreachable modal');
    
    // Calculate how long the modal has been displayed
    const elapsedTime = Date.now() - modalStartTime;
    const remainingTime = Math.max(0, minimumDisplayTime - elapsedTime);
    
    console.log('Modal displayed for:', elapsedTime + 'ms, waiting additional:', remainingTime + 'ms');
    
    // Wait for the minimum display time before closing the modal
    setTimeout(function() {
      swal.close();
      
      // Wait a moment for the modal to fully close before showing the next one
      setTimeout(function() {
        showUnreachableServerModal(keyId, displayHost, hostname, username, port, lineNumber);
      }, 300);
    }, remainingTime);
  });
}

function showFullRevocationModal(keyId, displayHost, hostname, username, port, lineNumber) {
  console.log('showFullRevocationModal called with:', {keyId, displayHost, hostname, username, port, lineNumber});
  
  swal({
    title: 'Revoke SSH Access',
    html: 'This will remove SSH access for <strong>' + displayHost + '</strong>.<br><br>' +
          '<strong>Full Revocation:</strong><br>' +
          '• Remove our public key from the remote server<br>' +
          '• Remove connection from local tracking list<br><br>' +
          'The remote machine will no longer allow passwordless SSH access from this server.<br><br>' +
          'This action cannot be undone.',
    type: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Revoke Access',
    cancelButtonText: 'Cancel',
    confirmButtonColor: '#d33',
    closeOnConfirm: false
  }, function(isConfirm) {
    if (isConfirm) {
      performFullRevocation(keyId, displayHost, hostname, username, port, lineNumber);
    }
  });
}

function performFullRevocation(keyId, displayHost, hostname, username, port, lineNumber) {
  updateStatus('Performing full SSH access revocation for ' + displayHost + '...');
  
  swal({
    title: 'Revoking Access...',
    text: 'Testing permissions and removing SSH key from remote server...',
    type: 'info',
    showConfirmButton: false,
    allowOutsideClick: false
  });
  
  executeOperation('revoke_exchanged_key', {
    connection_id: keyId,
    revoke_type: 'full',
    host: hostname,
    username: username,
    port: port
  }, function(response) {
    console.log('Full revocation response:', response);
    
    if (response.toLowerCase().includes('successfully')) {
      swal({
        title: 'Access Revoked!',
        html: 'SSH access has been successfully revoked for <strong>' + displayHost + '</strong>.<br><br>' +
              '✓ Key removed from remote server<br>' +
              '✓ Removed from local tracking<br>' +
              '✓ File permissions secured<br><br>' +
              'The remote server can no longer use passwordless SSH to connect.',
        type: 'success',
        confirmButtonText: 'Continue'
      }, function() {
        refreshExchangedKeys();
        smartUpdateStatus(response);
      });
    } else if (response.includes('PERMISSION_ERROR:')) {
      showPermissionRestrictedModal(keyId, displayHost, hostname, username, port, lineNumber, response);
    } else if (response.includes('KEY_NOT_FOUND:')) {
      showKeyNotFoundModal(keyId, displayHost, hostname, username, port, lineNumber, response);
    } else {
      swal({
        title: 'Revocation Failed',
        html: 'Failed to revoke SSH access for <strong>' + displayHost + '</strong>.<br><br>' +
              'Error details:<br>' + response.replace(/\n/g, '<br>'),
        type: 'error',
        confirmButtonText: 'OK'
      });
    }
  }, function() {
    swal({
      title: 'Error',
      text: 'Failed to communicate with the server during revocation',
      type: 'error',
      confirmButtonText: 'OK'
    });
  });
}

function retryRevocationConnection(keyId, displayHost, hostname, username, port, lineNumber) {
  swal.close();
  revokeExchangedKey(keyId, displayHost, hostname, username, port, lineNumber);
}

// Helper function for AJAX operations
function executeOperation(operation, data, successCallback, errorCallback) {
  const postData = {
    operation: operation,
    csrf_token: csrf_token || '',
    ...data
  };
  
  // Debug logging
  console.log('Sending AJAX request:', {
    operation: operation,
    csrf_token: postData.csrf_token ? postData.csrf_token.substring(0, 8) + '...' : 'EMPTY',
    data: data
  });
  
  $.ajax({
    url: '/plugins/ssh-tools/scripts/run_main_script.php',
    type: 'POST',
    data: postData,
    success: function(response) {
      // Check if response contains error
      if (response.toLowerCase().includes('error:')) {
        smartUpdateStatus(response);
      } else {
        smartUpdateStatus(response);
      }
      
      if (successCallback) {
        successCallback(response);
      }
    },
    error: function(xhr, status, error) {
      const errorMessage = 'Error: Failed to execute ' + operation + ' (' + status + ')';
      setStatus(errorMessage, 'error');
      
      if (errorCallback) {
        errorCallback(error);
      }
    }
  });
}

// Initialize the interface
$(document).ready(function() {
  // Start on the manage tab first, before any AJAX calls
  showTab('manage');
  
  // Add click handlers for tab buttons to ensure they work
  $('#btn-manage').click(function() { showTab('manage'); });
  $('#btn-exchange').click(function() { showTab('exchange'); });
  $('#btn-tools').click(function() { showTab('tools'); });
  $('#btn-debug').click(function() { showTab('debug'); });
  
  // Welcome message - add to status but don't switch to it
  updateStatus('SSH Tools plugin initialized successfully');
  updateStatus('Initializing SSH key management interface...');
  updateStatus('CSRF token initialized: ' + (csrf_token ? csrf_token.substring(0, 8) + '...' : 'MISSING'));
  
  // Only load initial data if CSRF token is available
  if (csrf_token && csrf_token.length > 0) {
    updateStatus('Loading initial data...');
    // Load initial data silently
    checkKeyStatus();
    refreshExchangedKeys();
    refreshAuthorizedKeys();
    updateStatus('Ready for SSH key operations');
  } else {
    updateStatus('Warning: CSRF token missing - some functions may not work');
    updateStatus('Ready for SSH key operations (limited functionality)');
  }
});
</script>
