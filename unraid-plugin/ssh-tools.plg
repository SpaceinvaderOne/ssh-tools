<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
<!ENTITY name                 "ssh-tools">
<!ENTITY author               "SpaceInvaderOne">
<!ENTITY plugin_version       "2025.08.03.1616">
<!ENTITY launch_page          "Settings/&name;">
<!ENTITY plugin_url           "https://github.com/SpaceinvaderOne/ssh-tools/raw/main/packages/pluginmain/ssh-tools-2025.08.03.1616-x86_64.txz">
<!ENTITY plugin_md5           "26f9ba336b00ec1f62955c3c8993adc2">
]>

<PLUGIN name="&name;" author="&author;" version="&plugin_version;" min="6.9.0" launch="&launch_page;" icon="gear">

<CHANGES>
### 2025.01.29
- Initial release of SSH Tools plugin for Unraid
- GUI interface for SSH key exchange with remote machines
- Automatic ed25519 key generation and management
- Track exchanged SSH keys and connection status
- Additional SSH utilities for connection testing and network scanning
- Responsive design compatible with mobile devices
- Based on proven SSH key exchange workflow used in ZFS replication and rsync
</CHANGES>

<!-- 
  This file is the installer for the plugin. It downloads a .txz package,
  which contains all the necessary PHP, HTML, and Shell scripts, and installs
  them to the correct locations on your Unraid server.
-->

<!-- INSTALLATION: Downloads and installs the main plugin package. -->

<!-- Step 1: Remove any previous installation of this plugin to ensure a clean install. -->
<FILE Run="/bin/bash">
<INLINE>
removepkg &name;-&plugin_version;-x86_64
</INLINE>
</FILE>

<!-- === DEPENDENCY MANAGEMENT FRAMEWORK === -->
<!-- 
    Smart Dependency Installation with Tracking v1.0
    
    This framework provides:
    - Conditional installation (only if dependency missing)
    - Installation tracking (records what we install)
    - Safe uninstall (only removes what we installed)
    - Reusable across plugins (just change PLUGIN_NAME and dependencies)
    
    To reuse in other plugins:
    1. Change PLUGIN_NAME variable
    2. Update DEPENDENCIES_BASE_URL 
    3. Modify install_dependency calls for your dependencies
    4. Copy the corresponding uninstall section
-->
<FILE Run="/bin/bash">
<INLINE><![CDATA[
echo ""
echo "----------------------------------------------------"
echo " Dependency Management Framework v1.0"
echo " Checking and installing required dependencies..."
echo "----------------------------------------------------"

# Configuration
PLUGIN_NAME="ssh-tools"
DEPENDENCIES_DIR="/boot/config/plugins/$PLUGIN_NAME"
INSTALLED_DEPS_FILE="$DEPENDENCIES_DIR/installed_dependencies.txt"
DEPENDENCIES_BASE_URL="https://github.com/SpaceinvaderOne/ssh-tools/raw/main/packages/dependencies"

# Ensure tracking directory exists
mkdir -p "$DEPENDENCIES_DIR"

# Clear previous tracking (fresh install)
> "$INSTALLED_DEPS_FILE"

# Reusable dependency installation function
install_dependency() {
    local package_name="$1"
    local package_file="$2" 
    local command_check="$3"
    
    echo ""
    echo "Checking dependency: $package_name"
    
    if ! command -v "$command_check" >/dev/null 2>&1; then
        echo " $package_name not found - installing..."
        
        # Download dependency
        if wget -q -O "/tmp/$package_file" "$DEPENDENCIES_BASE_URL/$package_file"; then
            echo " Downloaded $package_file successfully"
        else
            echo " Error: Failed to download $package_file"
            return 1
        fi
        
        # Install dependency
        if installpkg "/tmp/$package_file" >/dev/null 2>&1; then
            echo " $package_name installed successfully"
            # TRACK WHAT WE INSTALLED
            echo "$package_name" >> "$INSTALLED_DEPS_FILE"
            echo " Recorded $package_name as plugin-installed dependency"
        else
            echo " Error: Failed to install $package_name"
        fi
        
        # Clean up temporary file
        rm -f "/tmp/$package_file"
    else
        echo " $package_name already available (not installed by this plugin)"
    fi
}

# Install required dependencies for ssh-tools plugin
install_dependency "sshpass" "sshpass-1.05-x86_64-1_SBo.tgz" "sshpass"

# Future dependencies can be added here:
# install_dependency "expect" "expect-5.45-x86_64-1.tgz" "expect"

echo ""
echo "----------------------------------------------------"
echo " Dependency check completed"
echo "----------------------------------------------------"
echo ""
]]></INLINE>
</FILE>

<!-- Step 2: Download and install the new package. -->
<FILE Name="/boot/config/plugins/&name;/&name;-&plugin_version;-x86_64.txz" Run="upgradepkg --install-new">
  <URL>&plugin_url;</URL>
  <MD5>&plugin_md5;</MD5>
</FILE>

<!-- POST-INSTALL: Setup plugin scripts and persistent files -->
<FILE Run="/bin/bash">
<INLINE><![CDATA[
echo ""
echo "----------------------------------------------------"
echo " Setting up plugin scripts and persistent files..."
echo "----------------------------------------------------"

PLUGIN_SCRIPTS_DIR="/usr/local/emhttp/plugins/ssh-tools/scripts"
PERSISTENT_DIR="/boot/config/plugins/ssh-tools"

# Create persistent directory
mkdir -p "$PERSISTENT_DIR"
echo " Created persistent directory: $PERSISTENT_DIR"

# Create version file for display in plugin UI
PACKAGE_FILE=$(ls "$PERSISTENT_DIR"/ssh-tools-*.txz 2>/dev/null | head -1)
if [[ -n "$PACKAGE_FILE" ]]; then
    VERSION=$(basename "$PACKAGE_FILE" | sed 's/ssh-tools-\(.*\)-x86_64\.txz/\1/')
    echo "$VERSION" > "$PERSISTENT_DIR/VERSION"
    echo " Created version file: $PERSISTENT_DIR/VERSION (version: $VERSION)"
else
    echo "Unknown" > "$PERSISTENT_DIR/VERSION"
    echo " Warning: Could not determine version, set to Unknown"
fi

# Set executable permissions on plugin scripts
if [[ -d "$PLUGIN_SCRIPTS_DIR" ]]; then
    chmod +x "$PLUGIN_SCRIPTS_DIR"/*.sh 2>/dev/null || true
    chmod +x "$PLUGIN_SCRIPTS_DIR"/*.php 2>/dev/null || true
    echo " Set permissions for plugin script files"
else
    echo " Warning: Scripts directory not found at $PLUGIN_SCRIPTS_DIR"
fi

echo ""
echo "----------------------------------------------------"
echo " ssh-tools version &plugin_version; has been installed."
echo " Scripts are available at: $PERSISTENT_DIR"
echo "----------------------------------------------------"
echo ""
]]></INLINE>
</FILE>

<!-- UNINSTALL: Complete cleanup -->
<FILE Run="/bin/bash" Method="remove">
<INLINE><![CDATA[
echo ""
echo "----------------------------------------------------"
echo " Performing complete ssh-tools cleanup..."
echo "----------------------------------------------------"

# Remove plugin packages from the system
echo " Removing plugin packages..."
for pkg in $(ls /var/log/packages/ | grep "^ssh-tools-" 2>/dev/null); do
    removepkg "$pkg" 2>/dev/null || true
done

# === SMART DEPENDENCY CLEANUP === 
# Part of Dependency Management Framework v1.0
# Only removes dependencies that were tracked as installed by this plugin
# This prevents removing pre-existing system packages or packages installed by other plugins
echo ""
echo "Checking for plugin-installed dependencies to remove..."

PLUGIN_NAME="ssh-tools"
DEPENDENCIES_DIR="/boot/config/plugins/$PLUGIN_NAME"
INSTALLED_DEPS_FILE="$DEPENDENCIES_DIR/installed_dependencies.txt"

if [[ -f "$INSTALLED_DEPS_FILE" ]]; then
    if [[ -s "$INSTALLED_DEPS_FILE" ]]; then
        echo "Found dependency tracking file - removing plugin-installed dependencies:"
        while IFS= read -r dependency; do
            if [[ -n "$dependency" ]]; then
                echo " Removing plugin-installed dependency: $dependency"
                removepkg "$dependency" 2>/dev/null || true
            fi
        done < "$INSTALLED_DEPS_FILE"
        echo "Plugin-installed dependencies removed successfully"
    else
        echo "Dependency tracking file is empty - no dependencies were installed by this plugin"
    fi
else
    echo "No dependency tracking file found - no dependencies to remove"
fi

# Clean up plugin directory 
PLUGIN_DIR="/usr/local/emhttp/plugins/ssh-tools"
if [[ -d "$PLUGIN_DIR" ]]; then
    echo " Removing plugin files from $PLUGIN_DIR"
    rm -rf "$PLUGIN_DIR" 2>/dev/null || true
fi

# Clean up persistent config directory
CONFIG_DIR="/boot/config/plugins/ssh-tools"
if [[ -d "$CONFIG_DIR" ]]; then
    echo " Removing persistent files from $CONFIG_DIR"
    rm -rf "$CONFIG_DIR" 2>/dev/null || true
fi

echo ""
echo "----------------------------------------------------"
echo " Complete cleanup finished - system restored to pre-install state"
echo " ssh-tools has been successfully removed."
echo "----------------------------------------------------"
echo ""
]]></INLINE>
</FILE>

</PLUGIN>
